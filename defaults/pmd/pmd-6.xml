<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	name="Monits Java ruleset"
	xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
     Custom ruleset for Java projects
  </description>

  <rule ref="category/java/bestpractices.xml">
    <exclude name="AccessorClassGeneration"/>
    <exclude name="JUnitTestContainsTooManyAsserts"/>
    <exclude name="SwitchStmtsShouldHaveDefault"/>

    <exclude name="LooseCoupling" />
    <exclude name="OneDeclarationPerLine" />

    <exclude name="UseVarargs"/>

    <!-- The new PMD checks for concatenations, it's ok then! -->
    <!-- <exclude name="GuardLogStatement"/> -->

    <!-- Assume we have few meaningful asserts, making this desired but not required -->
    <exclude name="JUnitAssertionsShouldIncludeMessage" />

    <!-- Unused Formal Parameter needs special configuration -->
    <exclude name="UnusedFormalParameter" />
  </rule>

  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter">
    <properties>
      <property name="checkAll" value="true" />
    </properties>
  </rule>

  <rule ref="category/java/codestyle.xml">
    <!-- Confusing ternary needs special configuration -->
    <exclude name="ConfusingTernary"/>
    
    <!-- Checkstyle's FinalParametersCheck forces final vars instead of detecting those that could be final -->
    <exclude name="MethodArgumentCouldBeFinal"/>
    <exclude name="LocalVariableCouldBeFinal"/>

    <!-- old controversial rules -->
    <exclude name="AtLeastOneConstructor"/>
    <exclude name="AvoidFinalLocalVariable"/>
    <exclude name="AvoidPrefixingMethodParameters"/>
    <exclude name="AvoidUsingNativeCode"/>
    <exclude name="CallSuperInConstructor"/>
    <exclude name="DefaultPackage"/>
    <exclude name="OnlyOneReturn"/>

    <!-- j2ee rules -->
    <exclude name="LocalHomeNamingConvention" />
    <exclude name="LocalInterfaceSessionNamingConvention" />
    <exclude name="MDBAndSessionBeanNamingConvention" />
    <exclude name="RemoteInterfaceNamingConvention" />
    <exclude name="RemoteSessionInterfaceNamingConvention" />

    <!-- Naming rules are disabled - TODO we need to revise them and configure them -->
    <exclude name="AbstractNaming"/>
    <exclude name="ClassNamingConventions"/>
    <exclude name="LongVariable"/>
    <exclude name="MethodNamingConventions"/>
    <exclude name="MIsLeadingVariableName"/>
    <exclude name="ShortClassName"/>
    <exclude name="ShortMethodName"/>
    <exclude name="ShortVariable"/>
    <exclude name="SuspiciousConstantFieldName"/>
    <exclude name="VariableNamingConventions"/>

    <exclude name="TooManyStaticImports"/>
  </rule>

  <!-- ConfusingTernaryRule should ignore elseif since it creates lots of FPs -->
  <rule ref="category/java/codestyle.xml/ConfusingTernary">
    <properties>
      <property name="ignoreElseIf" value="true"/>
    </properties>
  </rule>

  <rule ref="category/java/design.xml">
    <exclude name="CouplingBetweenObjects" />
    <exclude name="ExcessiveImports" />
    <exclude name="LawOfDemeter" />
    <exclude name="LoosePackageCoupling" />

    <!-- TODO : review these -->
    <exclude name="CyclomaticComplexity" />
    <exclude name="ExcessiveClassLength" />
    <exclude name="ExcessiveMethodLength" />
    <exclude name="ExcessiveParameterList" />
    <exclude name="ExcessivePublicCount" />
    <exclude name="NcssConstructorCount" />
    <exclude name="NcssCount" />
    <exclude name="NcssMethodCount" />
    <exclude name="NcssTypeCount" />
    <exclude name="TooManyFields" />
    <exclude name="TooManyMethods" />
    <exclude name="UseObjectForClearerAPI" />
    <exclude name="DataClass" />
  </rule>

  <rule ref="category/java/documentation.xml">
    <exclude name="CommentContent"/>
    <exclude name="CommentRequired"/>
    <exclude name="CommentSize"/>
  </rule>

  <rule ref="category/java/errorprone.xml">
    <!-- Confiugured below -->
    <exclude name="AvoidDuplicateLiterals"/>

    <!-- old controversial rules -->
    <exclude name="AssignmentInOperand" />
    <exclude name="AvoidAccessibilityAlteration" />
    <exclude name="AvoidLiteralsInIfCondition" />
    <exclude name="DataflowAnomalyAnalysis" />
    <exclude name="DoNotCallGarbageCollectionExplicitly" />
    <exclude name="NullAssignment" />
    <exclude name="SuspiciousOctalEscape" />

    <!-- beans rules -->
    <exclude name="BeanMembersShouldSerialize" />

    <!-- j2ee rules -->
    <exclude name="UseProperClassLoader" />
    <exclude name="DoNotCallSystemExit" />
    <exclude name="StaticEJBFieldShouldBeFinal" />

    <!-- Customized below. -->
    <exclude name="EmptyCatchBlock"/>

    <!-- We prefer checkstyle's FallThrough -->
    <exclude name="MissingBreakInSwitch"/>
  </rule>

  <rule ref="category/java/errorprone.xml/EmptyCatchBlock">
    <properties>
      <property name="allowCommentedBlocks" value="true"/>
    </properties>
  </rule>

  <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
    <properties>
        <property name="maxDuplicateLiterals" value="1" />
        <property name="skipAnnotations" value="true" />
    </properties>
</rule>

  <rule ref="category/java/multithreading.xml">
    <exclude name="AvoidUsingVolatile"/>
    <exclude name="UseConcurrentHashMap"/>

    <!-- J2EE rules -->
    <exclude name="DoNotUseThreads"/>
  </rule>

  <rule ref="category/java/performance.xml">
    <exclude name="AvoidInstantiatingObjectsInLoops"/>
  </rule>
</ruleset>
